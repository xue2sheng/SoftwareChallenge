/**
* @file test01.cpp 
* @author Andres Sevillano 
* @date June 2018
* @brief Some basic tests on how to process input file.
*
* Pay attention to the fact that some external defined constant for data paths is used. 
* 
* @see https://github.com/xue2sheng/SoftwareChallenge/blob/master/README.md
*/

#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"
#include "preprocess.hpp" 

using namespace SoftwareChallenge;

SCENARIO("Process human-friendly inputs", "[file]") {

	GIVEN("A human-friendly input file") {

		Collection network{};
		REQUIRE(network.size() == 0);

		/** Generated by CMake in order not to have to face different relative paths on Windows and on Linux  */
		extern const char* SOFTWARE_CHALLENGE_DATA_PATH;
		std::string data_path{ SOFTWARE_CHALLENGE_DATA_PATH };
		data_path += "/test01.txt";

		auto [ success, hint ] = network.process(data_path);
		REQUIRE( success == true );
		REQUIRE( hint == "size=402 name_min=6 name_max=20" );

		WHEN("Read expected number of members") {

			//MYLES_JEFFCOAT, LANNY_TIBURCIO
			auto Lanny = network["LANNY_TIBURCIO"];
			REQUIRE(Lanny.size() > 0);
			auto Nyles = network["MYLES_JEFFCOAT"];
			REQUIRE(Nyles.size() > 0);

			THEN("MYLES_JEFFCOAT and LANNY_TIBURCIO should be friends") {
				REQUIRE( Nyles.end() != Nyles.find(Lanny.index) );
			}
			THEN("MARIANO_UMPHRESS should get some index") {
				auto Mariano = network["MARIANO_UMPHRESS"];
				REQUIRE(Mariano.size() > 0);
			}
			THEN("NICKY_MURR should get the latest index") {
				auto Nicky = network["NICKY_MURR"];
				REQUIRE(Nicky.size() > 0);
				REQUIRE(Nicky.index == (network.size() - 1));
			}

			THEN("Compact information in a computer-friendly way") {
				auto[success, hint] = network.compact();
				REQUIRE( success == true );
				REQUIRE( hint == "size=402 name_min=6 name_max=20 popular_min=ABEL_BONNES friends_min=1 popular_max=MYLES_JEFFCOAT friends_max=215" );
			}
		}

	}
}
