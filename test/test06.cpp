/**
* @file test06.cpp 
* @author Andres Sevillano 
* @date June 2018
* @brief Some basic tests on how to deal with binary files.
*
* Pay attention to the fact that some external defined constant for data paths is used. 
* 
* @see https://github.com/xue2sheng/SoftwareChallenge/blob/master/README.md
*/

#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"
#include "graph_algorithm.hpp"
#include "preprocess.hpp"

using namespace SoftwareChallenge;

/** @brief global variable out of laziness */
NameIndex human_name2index;
/** @brief global variable out of laziness */
FriendGraph human_friendGraph;

/* STACEY_STRIMPLE[56069]<-->RICH_OMLI[79562] */

SCENARIO("Process human-friendly inputs", "[file]") {

	GIVEN("A human-friendly input file") {

	/** Generated by CMake in order not to have to face different relative paths on Windows and on Linux  */
	extern const char* SOFTWARE_CHALLENGE_DATA_PATH;
	std::string data_path{ SOFTWARE_CHALLENGE_DATA_PATH };
    data_path += "/SocialNetwork.txt";

    Collection network;
    auto [ success, hint ] = network.process(data_path);
    REQUIRE( success == true );

	WHEN("Read expected number of members") {

            auto[success, hint, number_of_members, name2index, friendGraph ] = network.compact();
            REQUIRE( number_of_members == 82168);
            REQUIRE( name2index.size() == 82168);
            REQUIRE( friendGraph.size() == 82168);

            REQUIRE(name2index["STACEY_STRIMPLE"] == 56069);
            REQUIRE(name2index["RICH_OMLI"] == 79562);

            human_name2index = network.name2index;
            human_friendGraph = network.friendGraph;

            {
                FriendGraph temp;
                std::vector<uint8_t> raw { human_friendGraph.compact() };
                IndexType length = temp.load(raw);
                REQUIRE( human_friendGraph.size() == temp.size() );
                bool equals = ( human_friendGraph == temp );
                REQUIRE( equals == true );
            }

            {
                NameIndex temp;
                std::vector<uint8_t> raw { human_name2index.compact() };
                REQUIRE( human_name2index.neededBytes() == raw.size() );
                IndexType raw_length = *reinterpret_cast<IndexType*>(raw.data());
                IndexType length = temp.load(raw);
                REQUIRE( raw_length == length );
                REQUIRE( human_name2index.size() == length );
                REQUIRE( human_name2index.neededBytes() == temp.neededBytes() );
                REQUIRE( human_name2index.size() == temp.size() );

                // first element
                REQUIRE( length == human_name2index.size() );
                REQUIRE( length == temp.size() );
                REQUIRE( raw_length == human_name2index.size() );
                REQUIRE( raw_length == temp.size() );

                // all
                bool equals = ( human_name2index == temp );
                REQUIRE( equals == true );
            }

            THEN("Compact information in a computer-friendly way") {

                auto[ success, hint, ties ] = searchFriends("STACEY_STRIMPLE","RICH_OMLI", name2index, friendGraph);
                REQUIRE( ties >= 5);
            }

    }

  }

  GIVEN("A computer-friendly input file") {

    /** Generated by CMake in order not to have to face different relative paths on Windows and on Linux  */
    extern const char* SOFTWARE_CHALLENGE_DATA_PATH;
    std::string data_path{ SOFTWARE_CHALLENGE_DATA_PATH };
    data_path += "/SocialNetwork.bin";

    Collection network;
    auto [ success, hint, number_of_members, name2index_length, friendGraph_length ] = network.load(data_path);
    REQUIRE( success == true );

    WHEN("Read expected number of members") {

                REQUIRE( number_of_members == 82168);

                //REQUIRE( name2index_length == 0 );
                //REQUIRE( friendGraph_length == 0 );

                REQUIRE( number_of_members == network.name2index.size());
                REQUIRE( network.name2index["STACEY_STRIMPLE"] == 56069);
                REQUIRE( network.name2index["RICH_OMLI"] == 79562);

                REQUIRE( human_name2index.size() == network.name2index.size() );
                REQUIRE( human_name2index == network.name2index );

                bool equals = ( human_friendGraph == network.friendGraph );
                REQUIRE( equals == true );

            THEN("Compact information in a computer-friendly way") {

                auto[ success, hint, ties ] = searchFriends("STACEY_STRIMPLE","RICH_OMLI", network.name2index, network.friendGraph);
                REQUIRE( success == true );
                REQUIRE( ties >= 5 );
            }

    }
  }

}
