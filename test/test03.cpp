/**
* @file test03.cpp 
* @author Andres Sevillano 
* @date June 2018
* @brief Some basic tests on how to work with the generated graph.
*
* Pay attention to the fact that some external defined constant for data paths is used. 
* 
* @see https://github.com/xue2sheng/SoftwareChallenge/blob/master/README.md
*/

#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"
#include "graph_algorithm.hpp"

using namespace SoftwareChallenge;

// src/SoftwareChallenge -g -s -f ../data/test03.txt -c ../data/test03.bin
// Number of members in that social network: 3
// size=3 relationships=4 name_min=1 name_max=1 popular_min=A friends_min=1 popular_max=B friends_max=2 stored in file ../data/test03.bin
/*

A,B
B,A
B,C
C,B

0,1
1,0
1,2
2,1

0->1
1->0,2 or 1->2,0
2->1

*/
SCENARIO("Process computer-friendly inputs", "[binary]") {

	GIVEN("A computer-friendly input file") {

	/** Generated by CMake in order not to have to face different relative paths on Windows and on Linux  */
	extern const char* SOFTWARE_CHALLENGE_DATA_PATH;
	std::string data_path{ SOFTWARE_CHALLENGE_DATA_PATH };
    data_path += "/test03.bin";

    auto[success, hint, number_of_members, name2index, friendGraph] = load(data_path);

	WHEN("Read expected number of members") {

            REQUIRE( number_of_members == 3);

            THEN("Compact information in a computer-friendly way") {

                REQUIRE(name2index["A"] == 0);
                REQUIRE(name2index["B"] == 1);
                REQUIRE(name2index["C"] == 2);

                REQUIRE(friendGraph[0].size() == 1);
                REQUIRE(friendGraph[1].size() == 2);
                REQUIRE(friendGraph[2].size() == 1);

                REQUIRE(friendGraph[0][0] == 1);
                bool check = (friendGraph[1][0] == 0 && friendGraph[1][1] == 2) || (friendGraph[1][0] == 2 && friendGraph[1][1] == 0);
                REQUIRE( check == true );
                REQUIRE(friendGraph[2][0] == 1);
            }

    }

    WHEN("Check direct frieds") {

            auto[ successAB, hintAB, tiesAB ] = searchFriends("A","B", name2index, friendGraph);
            auto[ successBC, hintBC, tiesBC ] = searchFriends("B","C", name2index, friendGraph);

            THEN("Must be marked as direct friends") {
                REQUIRE( successAB == true );
                REQUIRE( tiesAB == 0 );
                REQUIRE( hintAB == "A[0]<-->B[1] They are direct friends" );
                REQUIRE( successBC == true );
                REQUIRE( tiesBC == 0 );
                REQUIRE( hintBC == "B[1]<-->C[2] They are direct friends" );
            }
    }

    WHEN("Launch a typcial search") {

            auto[ success, hint, ties ] = searchFriends("A","C", name2index, friendGraph);

            THEN("Must have the correct distance") {

                REQUIRE( success == true );
                REQUIRE( ties == 2 );
            }
    }
  }
}
