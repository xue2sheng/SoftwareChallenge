/**
* @file test02.cpp 
* @author Andres Sevillano 
* @date June 2018
* @brief Some basic tests on how to work with the generated graph.
*
* Pay attention to the fact that some external defined constant for data paths is used. 
* 
* @see https://github.com/xue2sheng/SoftwareChallenge/blob/master/README.md
*/

#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"
#include "graph_algorithm.hpp"

using namespace SoftwareChallenge;

SCENARIO("Process computer-friendly inputs", "[binary]") {

	GIVEN("A computer-friendly input file") {

		/** Generated by CMake in order not to have to face different relative paths on Windows and on Linux  */
		extern const char* SOFTWARE_CHALLENGE_DATA_PATH;
		std::string data_path{ SOFTWARE_CHALLENGE_DATA_PATH };
        data_path += "/test02.bin";

        /*  text	index	sets		popularity
            A,B		0,1		0->1,2		0->2,1
            A,C		0,2		1->0		1->0
            B,A		1,0		2->0,3		2->0,3
            C,A		2,0		3->2		3->2
            C,D		2,3
            D,C		3,2
		*/

        auto[success, hint, number_of_members, name2index, friendGraph] = load(data_path);

		WHEN("Read expected number of members") {

            REQUIRE( number_of_members == 4);

            THEN("Compact information in a computer-friendly way") {

                REQUIRE(name2index["A"] == 0);
                REQUIRE(name2index["B"] == 1);
                REQUIRE(name2index["C"] == 2);
                REQUIRE(name2index["D"] == 3);

                REQUIRE(friendGraph[0].size() == 2);
                REQUIRE(friendGraph[1].size() == 1);
                REQUIRE(friendGraph[2].size() == 2);
                REQUIRE(friendGraph[3].size() == 1);

                REQUIRE(friendGraph[0][0] == 2);
                REQUIRE(friendGraph[0][1] == 1);
                REQUIRE(friendGraph[1][0] == 0);
                REQUIRE(friendGraph[2][0] == 0);
                REQUIRE(friendGraph[2][1] == 3);
                REQUIRE(friendGraph[3][0] == 2);
            }
        }

   	}
}
