/**
* @file main.cpp 
* @author Andres Sevillano 
* @date June 2018
* @brief Silly process to check it out ideas before writing down proper unit tests.
*
* Pay attention to the fact that some external defined constant for the  version number is used. 
* 
* @see https://github.com/xue2sheng/SoftwareChallenge/blob/master/README.md
*/

#include <iostream>
#include "preprocess.hpp"

using namespace std;
using namespace SoftwareChallenge;

int main()
{
	/** Generated by CMake in order not to have to face different relative paths on Windows and on Linux  */
	extern const char* SOFTWARE_CHALLENGE_DATA_PATH;
	std::string data_path{ SOFTWARE_CHALLENGE_DATA_PATH };
	
	// size=402 name_min=6 name_max=20 popular_min=ABEL_BONNES friends_min=1 popular_max=MYLES_JEFFCOAT friends_max=215
	// const std::string file_name{ data_path + "/test01.txt" };

	// size=82168 name_min=6 name_max=24 popular_min=AARON_BOUSMAN friends_min=1 popular_max=CLIFTON_TIMMIS friends_max=2552
	const std::string file_name{ data_path + "/SocialNetwork.txt" };

	/** Generated by CMake in order to have the very same version number for binaries and for doxygen documentation */
	extern const char* SOFTWARE_CHALLENGE_VERSION;
	cout << SOFTWARE_CHALLENGE_VERSION << endl << endl;

	Collection network;

	// process file
	if (auto[success, hint] = network.process(file_name); !success) { cout << "ERROR: " << hint.c_str() << endl; }

	// compact info
	if (auto[success, hint] = network.compact(); !success) { cout << "ERROR: " << hint.c_str() << endl; }
	else { cout << hint.c_str() << endl; }

	return 0;
}
